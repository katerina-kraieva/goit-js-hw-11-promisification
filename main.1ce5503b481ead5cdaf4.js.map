{"version":3,"sources":["webpack:///./js/task-2.js","webpack:///./js/task-3.js","webpack:///./js/task-1.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","map","user","logger","updatedUsers","console","table","then","makeTransaction","transaction","reject","min","max","delay","Math","floor","random","setTimeout","id","time","logSuccess","log","logError","warn","amount","catch","require","ms"],"mappings":"mMAIMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAsBnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAAAC,GAIfA,EAHmBH,EAASI,KAAI,SAAAC,GAAI,OACtCA,EAAKR,OAASI,EAAd,iBAA8BI,EAA9B,CAAoCP,QAASO,EAAKP,SAAWO,UAM7DC,EAAS,SAAAC,GAAY,OAAIC,QAAQC,MAAMF,IAE7CR,EAAgBH,EAAO,SAASc,KAAKJ,GACrCP,EAAgBH,EAAO,OAAOc,KAAKJ,GCpCnC,IAiBMK,EAAkB,SAACC,GACrB,OAAO,IAAIV,SAAQ,SAACC,EAASU,GACzB,IAnB2BC,EAAKC,EAmB1BC,GAnBqBF,EAmBa,IAnBRC,EAmBa,IAlB5CE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAmB9CM,YAAW,WACYH,KAAKE,SAAW,GAG/BhB,EAAQ,CAAEkB,GAAIT,EAAYS,GAAIC,KAAMN,IAEpCH,EAAOD,EAAYS,MAExBL,OAILO,EAAa,SAAC,GAAiB,IAAfF,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACxBd,QAAQgB,IAAR,eAA2BH,EAA3B,iBAA8CC,EAA9C,OAGIG,EAAW,SAAAJ,GACfb,QAAQkB,KAAR,gCAA6CL,EAA7C,8BAaFV,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,KAC/BjB,KAAKa,GACLK,MAAMH,GAETd,EAAgB,CAAEU,GAAI,GAAIM,OAAQ,MAC/BjB,KAAKa,GACLK,MAAMH,I,yBClEDvB,EAAY2B,EAAQ,QAApB3B,QAEFc,EAAQ,SAAAc,GACV,OAAO,IAAI5B,GAAQ,SAAAC,GACfiB,YAAW,WACPjB,EAAQ2B,KACTA,OAKLxB,EAAS,SAAAgB,GAAI,OAAId,QAAQgB,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMN,KAAKJ,GACjBU,EAAM,KAAMN,KAAKJ,GACjBU,EAAM,MAAMN,KAAKJ,K","file":"main.1ce5503b481ead5cdaf4.js","sourcesContent":["/*Перепиши функцию toggleUserState() так, чтобы она не использовала \r\ncallback-функцию callback, а принимала всего два параметра allUsers \r\nи userName и возвращала промис.*/\r\n\r\nconst users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\n/*const toggleUserState = (allUsers, userName, callback) => {\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n\r\n  callback(updatedUsers);\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', logger);\r\n// toggleUserState(users, 'Lux', logger);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n      const updatedUsers = allUsers.map(user =>\r\n      user.name === userName ? { ...user, active: !user.active } : user,\r\n        );\r\n        resolve(updatedUsers);\r\n    })  \r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","/*Перепиши функцию makeTransaction() так, чтобы она не использовала \r\ncallback-функции onSuccess и onError, а принимала всего один параметр \r\ntransaction и возвращала промис.*/\r\n\r\n// const { resolve, reject } = require(\"core-js/fn/promise\");\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n/*const makeTransaction = (transaction, onSuccess, onError) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n\r\n  setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n    if (canProcess) {\r\n      onSuccess(transaction.id, delay);\r\n    } else {\r\n      onError(transaction.id);\r\n    }\r\n  }, delay);\r\n};*/\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n        const delay = randomIntegerFromInterval(200, 500);\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n\r\n            if (canProcess) {\r\n                resolve({ id: transaction.id, time: delay });\r\n            } else {\r\n                reject(transaction.id);\r\n            }\r\n        }, delay); \r\n    });   \r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);","/*Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" \r\nчерез ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд \r\nкоторое передали во время вызова функции delay.*/\r\n\r\nconst { Promise } = require(\"core-js\");\r\n\r\nconst delay = ms => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms);\r\n    })\r\n  \r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms"],"sourceRoot":""}